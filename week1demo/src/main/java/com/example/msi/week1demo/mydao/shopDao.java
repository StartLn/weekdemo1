package com.example.msi.week1demo.mydao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.msi.week1demo.bean.shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class shopDao extends AbstractDao<shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shopimage = new Property(1, String.class, "shopimage", false, "SHOPIMAGE");
        public final static Property Shopname = new Property(2, String.class, "shopname", false, "SHOPNAME");
        public final static Property Shopprice = new Property(3, double.class, "shopprice", false, "SHOPPRICE");
        public final static Property Shopsum = new Property(4, int.class, "shopsum", false, "SHOPSUM");
        public final static Property Shopid = new Property(5, int.class, "shopid", false, "SHOPID");
    }


    public shopDao(DaoConfig config) {
        super(config);
    }
    
    public shopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHOPIMAGE\" TEXT," + // 1: shopimage
                "\"SHOPNAME\" TEXT," + // 2: shopname
                "\"SHOPPRICE\" REAL NOT NULL ," + // 3: shopprice
                "\"SHOPSUM\" INTEGER NOT NULL ," + // 4: shopsum
                "\"SHOPID\" INTEGER NOT NULL );"); // 5: shopid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopimage = entity.getShopimage();
        if (shopimage != null) {
            stmt.bindString(2, shopimage);
        }
 
        String shopname = entity.getShopname();
        if (shopname != null) {
            stmt.bindString(3, shopname);
        }
        stmt.bindDouble(4, entity.getShopprice());
        stmt.bindLong(5, entity.getShopsum());
        stmt.bindLong(6, entity.getShopid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopimage = entity.getShopimage();
        if (shopimage != null) {
            stmt.bindString(2, shopimage);
        }
 
        String shopname = entity.getShopname();
        if (shopname != null) {
            stmt.bindString(3, shopname);
        }
        stmt.bindDouble(4, entity.getShopprice());
        stmt.bindLong(5, entity.getShopsum());
        stmt.bindLong(6, entity.getShopid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public shop readEntity(Cursor cursor, int offset) {
        shop entity = new shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shopimage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shopname
            cursor.getDouble(offset + 3), // shopprice
            cursor.getInt(offset + 4), // shopsum
            cursor.getInt(offset + 5) // shopid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopimage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShopname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopprice(cursor.getDouble(offset + 3));
        entity.setShopsum(cursor.getInt(offset + 4));
        entity.setShopid(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(shop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
